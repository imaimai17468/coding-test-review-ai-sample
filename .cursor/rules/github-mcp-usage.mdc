---
description:
globs:
alwaysApply: true
---

# コードレビューのための GitHub MCP 使用ガイドライン

このドキュメントでは、コードレビュー評価のための GitHub MCP ツールの使用方法と推奨されるワークフローについて説明します。

## 重要な注意事項

**このルールが適用されると、Cursor AgentはGitHubリポジトリを自動的にローカルクローンせず、常にGitHub API経由でファイルにアクセスします。**

## コードレビュー実行手順

### 1. レポジトリ情報の取得

```
MCPを使って「{owner}/{repo}」をコードレビューしてください
```

このコマンドで実行すると、指定されたGitHubリポジトリのコードをGitHub API経由で分析し、評価レポートを生成します。ローカル環境へのクローンは行いません。

### 2. 特定のファイルやディレクトリに焦点を当てる場合

特定のファイルやディレクトリに焦点を当てたい場合は、以下のように指定できます：

```
MCPを使って「{owner}/{repo}」の「src/components」ディレクトリをコードレビューしてください
```

または特定のファイルのみを確認する場合：

```
MCPを使って「{owner}/{repo}」の「src/components/Chart.tsx」と「src/hooks/usePopulation.ts」をコードレビューしてください
```

### 3. 必要なファイルの確認

最低限確認すべきファイル：

- `package.json` - 使用ライブラリとバージョンの確認
- `tsconfig.json` - TypeScriptの設定確認
- `README.md` - 指示やドキュメント内容の確認
- `.eslintrc` または同等ファイル - リンター設定の確認
- `.github/workflows` - CI/CD設定の確認
- `src/` ディレクトリ内のメインコンポーネント
- テストファイル

## GitHub MCPツールの使用上の注意

- ファイル取得時にエラーが発生した場合は、別の方法（GitHub UI経由でコードを直接確認するなど）を試してください
- 大規模なリポジトリの場合は、主要ファイルに焦点を当てて分析してください
- テスト評価は実際に実行できない場合もあるため、コードの品質から判断してください
- APIキーの扱いなどセキュリティ面は特に注意して確認してください

## プロセス概要

1. リポジトリ情報を指定
2. Cursorエージェントが GitHub API 経由でファイルを分析（ローカルクローンは行わない）
3. 指定したファイル/ディレクトリのコードを分析
4. チェックリストに基づいて評価
5. レポート生成

## 注意事項

- GitHubアカウントと対象リポジトリへのアクセス権が必要です
- API制限：認証なしで1時間60リクエスト、認証ありで1時間5,000リクエスト
- プライベートリポジトリには適切な認証が必要です
- 大規模リポジトリはAPIリクエスト制限に達する可能性があります
- APIリクエスト経由の評価では一部のファイル取得に制限がある場合があります

## トラブルシューティング

問題が発生した場合は以下を確認してください：

- リポジトリ名とブランチ名が正確か
- リポジトリへのアクセス権があるか
- GitHub APIの利用制限に達していないか
- ファイルが見つからない場合は、パスが正確か確認してください
- 重要なファイルをすべて確認できているか
- 非常に大きなリポジトリの場合、一部のファイルが取得できない可能性があります
