---
description:
globs:
alwaysApply: true
---
# コードレビューレポート出力ガイド

このファイルでは、フロントエンドコードレビューの結果をレポート形式で出力するための機能と形式を定義します。

## レポートテンプレート

コードレビュー結果は以下のテンプレート形式で出力されます：

```markdown
# フロントエンドコードレビュー結果

## レポート概要

- **リポジトリ**: ${REPOSITORY}
- **ブランチ**: ${BRANCH}

## 評価結果サマリー

- **総合評価**: ${EVALUATION_LEVEL}
- **スコア**: ${TOTAL_SCORE} / XX 点

### 達成率
- **必須項目**: ${REQUIRED_PASS_COUNT}/${REQUIRED_TOTAL_COUNT} (${REQUIRED_PERCENTAGE}%)
- **Good項目**: ${GOOD_PASS_COUNT}/${GOOD_TOTAL_COUNT} (${GOOD_PERCENTAGE}%)
- **改善項目**: ${NEXT_ISSUES_COUNT}件

${EVALUATION_GUIDANCE}

## 必須チェック項目

${REQUIRED_CHECKS}

## Goodチェック項目

✅ **動作確認（デザイン・挙動）**
${GOOD_UI_CHECKS}

✅ **設計・スタイリング**
${GOOD_ARCHITECTURE_CHECKS}

✅ **保守・運用**
${GOOD_MAINTAINABILITY_CHECKS}

✅ **コード全般**
${GOOD_CODE_CHECKS}

## 改善点

${NEXT_CHECKS}

## コードの良い点

${CODE_STRENGTHS}

## 改善提案

${IMPROVEMENT_SUGGESTIONS}

## 総合コメント

${OVERALL_COMMENT}

---

*このレポートはアプリケーションの静的分析に基づいています。実際の動作確認やユーザビリティテストは含まれていない場合があります。*
```

## レポート出力方法

コードレビュー結果は自動的にファイルとして出力されます。実行時に以下のコマンド形式を使用します：

```
MCPを使って「{owner}/{repo} {branch}」をコードレビューしてください
```

出力されるファイル名の形式：

```
{owner}-{repo}-result.md
```

例えば：
```
MCPを使って「imaimai17468/yumemi master」をコードレビューしてください
```

このコマンドを実行すると、`imaimai17468-yumemi-result.md`というファイルが自動的に作成されます。

### ファイル出力の無効化

ファイル出力を無効にして、結果をチャット内に直接表示したい場合は、以下のコマンドを使用します：

```
MCPを使って「{owner}/{repo} {branch}」をコードレビューして、結果を出力しないでください
```

## レポート出力の仕様

### 変数置換

テンプレートでは、以下の変数が利用可能です：

| 変数名 | 説明 |
|-------|------|
| `${REPOSITORY}` | リポジトリ名 |
| `${BRANCH}` | ブランチ名 |
| `${EVALUATION_LEVEL}` | 評価レベル（S/A/B/NG） |
| `${TOTAL_SCORE}` | 総合スコア |
| `${REQUIRED_PASS_COUNT}` | 必須項目の合格数 |
| `${REQUIRED_TOTAL_COUNT}` | 必須項目の総数 |
| `${REQUIRED_PERCENTAGE}` | 必須項目の達成率 |
| `${GOOD_PASS_COUNT}` | Good項目の合格数 |
| `${GOOD_TOTAL_COUNT}` | Good項目の総数 |
| `${GOOD_PERCENTAGE}` | Good項目の達成率 |
| `${NEXT_ISSUES_COUNT}` | 改善点の数 |
| `${EVALUATION_GUIDANCE}` | 評価判断の基準（評価が迷う場合のみ表示） |
| `${REQUIRED_CHECKS}` | 必須チェック項目のレポート |
| `${GOOD_UI_CHECKS}` | Goodチェック項目の動作確認（デザイン・挙動）カテゴリ |
| `${GOOD_ARCHITECTURE_CHECKS}` | Goodチェック項目の設計・スタイリングカテゴリ |
| `${GOOD_MAINTAINABILITY_CHECKS}` | Goodチェック項目の保守・運用カテゴリ |
| `${GOOD_CODE_CHECKS}` | Goodチェック項目のコード全般カテゴリ |
| `${NEXT_CHECKS}` | 改善点のレポート |
| `${CODE_STRENGTHS}` | コードの良い点 |
| `${IMPROVEMENT_SUGGESTIONS}` | 改善提案 |
| `${OVERALL_COMMENT}` | 総合コメント |

### 改善点の参照情報

改善点（Next）を出力する際は、**必ず**該当するファイルへの参照情報を含めてください。参照情報の省略は原則として行わないでください。特にコード全般のNextポイントであっても、具体的なファイル参照を提供することが重要です。参照形式は以下のようにします：

```markdown
⚠️ **コンポーネント設計・スタイリング全般**
- 複雑なビジネスロジックがコンポーネントに存在している（`src/components/Prefecture.tsx`）
- コンポーネント内部でAPI呼び出しを直接行っている（`src/pages/index.tsx`）
```

参照情報を含めることで、レビュー対象者が具体的にどのファイルの修正が必要かを把握しやすくなります。複数のファイルが関連する場合は、代表的なファイルまたは全てのファイルを列挙します：

```markdown
- 冗長なAPIコールが複数箇所に存在しています（`src/hooks/usePrefecture.ts`, `src/components/PrefectureList.tsx`）
```

もし問題が全般的で特定のファイルに限定されない場合は、その問題が見られる代表的なファイルを少なくとも1つ例示してください：

```markdown
- コードにマジックナンバーが存在している（例: `src/utils/constants.ts`, `src/components/Chart.tsx`）
```

参照ファイルを特定できない例外的なケースでは、その理由を明記した上で参照情報を省略することができますが、これは極めて稀なケースに限ります。例えば：

```markdown
- CI/CD環境が構築されていない（リポジトリ全体の課題のため特定ファイルなし）
```

### 出力形式のカスタマイズ

マークダウン出力形式は以下の要素でカスタマイズできます：

| 設定項目 | 説明 | デフォルト |
|---------|------|-----------|
| フォーマット | マークダウンフォーマット (standard, gfm) | gfm |
| 絵文字 | 合否をアイコンで表示 | 有効 (✅, ⚠️, ❌) |
| 見出しレベル | 見出しの深さ | H1-H3 |
| セクション順序 | レポートセクションの順序 | テンプレート準拠 |

### マークダウン形式の要件

#### 基本構造
- 各レポートは一貫した構造に従う
- ヘッダーにレポート名、日時、リポジトリ情報を含める
- 目次または概要セクションを含める
- 各セクションを適切な見出しレベルで区分けする

#### フォーマット要素
- 見出しには適切な`#`レベルを使用する（`#`、`##`、`###`など）
- リスト項目には`-`または`*`を使用する
- コードブロックには`` ``` ``記法を使用する
- テーブルは`|`と`-`を使用して整形する
- 重要項目は**太字**で強調する
- 状態表示には絵文字を使用する（✅成功、❌失敗、⚠️警告など）

### ファイル出力仕様

- 出力されたファイルはワークスペースのルートディレクトリに保存されます
- ファイル名の形式は `{owner}-{repo}-result.md` です
- マークダウンファイルはGitHub Flavored Markdown (GFM) 形式で出力され、GitHub上での表示に最適化されています

### 出力先オプション

- **ローカルファイル**: 指定されたパスにマークダウンファイルとして保存
- **クリップボード**: マークダウンをクリップボードにコピー
- **GitHub Issue**: GitHub Issue/PRにコメントとして投稿
- **標準出力**: コンソールに直接表示

## レポート例

```markdown
# フロントエンドコードレビュー結果
...

```

## トラブルシューティング

一般的な問題と解決方法：

1. **文字化け**: UTF-8エンコーディングを使用しているか確認
2. **テンプレート読み込みエラー**: パスが正しいか確認
3. **絵文字表示問題**: 絵文字を無効化することで解決できる場合がある
4. **ファイル書き込み権限**: ファイルを出力するディレクトリに書き込み権限があるか確認
