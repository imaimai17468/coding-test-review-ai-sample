---
description: フロントエンドコーディング試験の評価結果を候補者に伝えるためのフィードバックテンプレートと作成ガイドライン。合否通知や良かった点・改善点の伝え方について定義し、具体的な評価区分（S/A/B/NG）を候補者に直接開示せず、建設的で敬意を示したフィードバックを作成するためのルール。
globs:
alwaysApply: false
---
# フロントエンドコードレビュー フィードバックテンプレート

このルールファイルでは、フロントエンドコーディング試験の総合評価としてフィードバックを候補者に送るためのテンプレートとガイドラインを定義します。

## 重要ポイント

**注意**: 候補者へのフィードバックでは、具体的な評価区分（S/A/B/NG）は直接伝えないでください。評価区分は社内での判断基準として使用し、候補者には「合格」または「不合格」という形でのみ結果を伝えます。

## フィードバックメッセージの構成

### 基本構成
フィードバックメッセージは以下の構成を基本とします：

1. **導入部**: 感謝の意を伝える
2. **ポジティブなフィードバック**: 実装の良かった点
3. **改善点のフィードバック**: 課題となった点
4. **結論**: 合否の通知
5. **（合格の場合）次のステップに関する案内**

### テンプレート構造

```markdown
# コードチェック結果フィードバック

この度はコーディングテストをご提出いただき、ありがとうございました。

## 良かった点

${POSITIVE_FEEDBACK}

## 改善点

${IMPROVEMENT_FEEDBACK}

## 総合評価

${OVERALL_EVALUATION}
```

## 評価結果別のフィードバックガイドライン

### 優秀合格（S評価相当）

優秀合格のフィードバックには以下の要素を含めます：

- 特に優れていた実装箇所を具体的に指摘
- ...

**例**:
```
この度はコーディングテストをご提出いただき、ありがとうございました。
...

```

### 合格（A評価相当）

合格のフィードバックには以下の要素を含めます：

- 要件を満たし、優れた実装がなされている点を評価
- ...

**例**:
```
この度はコーディングテストをご提出いただき、ありがとうございました。
...

```

### 不合格（要改善）

不合格（要改善）のフィードバックには以下の要素を含めます：

- 努力を認め、良かった点を伝える
- ...

**例**:
```
この度はコーディングテストをご提出いただき、ありがとうございました。
...

```

### 不合格（重大な問題あり）

不合格（重大な問題あり）のフィードバックには以下の要素を含めます：

- 感謝の意を伝える
- ...

**例**:
```
この度はコードチェックをご提出いただき誠にありがとうございました。
...

```

## フィードバックの書き方ガイドライン

### 良いフィードバックの特徴

1. **具体的である**：「良いコード」ではなく「コンポーネント分割の粒度が適切で、責務が明確に分離されている」のように具体的に
2. **バランスが取れている**：良い点と改善点のバランスを意識する
3. **建設的である**：単に問題点を指摘するのではなく、改善のヒントを含める
4. **客観的である**：主観的な表現を避け、具体的な事実に基づいて記述する
5. **敬意を示している**：候補者の努力を尊重し、丁寧な言葉遣いを心がける
6. **明確である**：結論（合否）を明確に伝える

### 良くないフィードバックの特徴

1. **曖昧である**：「いまいちでした」のような具体性のない表現
2. **一方的である**：良い点または改善点のみに偏っている
3. **否定的である**：改善の余地を示さず単に批判している
4. **感情的である**：個人的な感情や好みに基づいた評価
5. **結論が不明確である**：合否が明確に伝わらない
6. **評価区分の開示**：S/A/B/NGなどの内部評価区分を直接伝える

## フィードバック例文集

### 良かった点のフィードバック例

#### アーキテクチャ設計
- Container/Presentational/Hooksパターンによる関心の分離が適切に実装されていました
- ...

#### パフォーマンス最適化
- データの効率的なキャッシングにより、無駄なAPIリクエストを削減されていました
- ...

#### UI/UX
- ローディング状態やエラー状態の表示が丁寧に実装されています
- ...

#### テスト
- ユニットテスト、統合テスト、E2Eテストがバランス良く実装されています
- ...

#### 開発プロセス
- GitHubのIssue/PRを活用した開発プロセスが整っています
- ...

### 改善点のフィードバック例

#### アーキテクチャ設計
- コンポーネント内に複雑なビジネスロジックが混在している箇所があり、カスタムフックへの抽出が望ましいです
- ...

#### パフォーマンス
- 不必要なAPI呼び出しが発生しており、キャッシュ戦略の改善が必要です
- ...

#### UI/UX
- エラー状態のフィードバックが不足しており、ユーザビリティを改善する余地があります
- ...

#### テスト
- テストケースの網羅性が不十分で、エッジケースが考慮されていません
- ...

#### 開発プロセス
- 環境変数に関するドキュメントが不足しています
- ...

## フィードバック作成のためのチェックリスト

フィードバックを作成する際は、以下のチェックリストを参考にしてください：

1. **全体評価の確認** (内部用、候補者には非開示)
   - [ ] コードチェックの評価結果（S/A/B/NG）を確認
   - [ ] 必須チェック項目の達成状況を確認
   - [ ] Goodチェック項目の達成状況を確認
   - [ ] 改善点（Next）の数と内容を確認

2. **良かった点の整理**
   - [ ] 特に優れていた実装箇所を3つ以上リストアップ
   - [ ] 技術的な強みを具体的に言語化
   - [ ] 工夫やオリジナリティが見られた点を特定

3. **改善点の整理**
   - [ ] 主要な改善点を優先度順にリストアップ
   - [ ] 致命的な問題点を特定（ある場合）
   - [ ] 細かな改善点をカテゴリごとに整理

4. **フィードバックの構成**
   - [ ] 感謝の意を示す導入文
   - [ ] 具体的で建設的な良かった点のフィードバック
   - [ ] 具体的で建設的な改善点のフィードバック
   - [ ] 明確な合否の通知
   - [ ] （合格の場合）次のステップの案内

5. **フィードバックの確認**
   - [ ] 表現が丁寧で敬意を示しているか
   - [ ] 具体的で客観的な内容になっているか
   - [ ] 良い点と改善点のバランスが適切か
   - [ ] 合否の通知が明確か
   - [ ] 文章全体が一貫性を持っているか
   - [ ] 評価区分（S/A/B/NG）が直接言及されていないか
   - [ ] 具体的で客観的な内容になっているか
   - [ ] 良い点と改善点のバランスが適切か
   - [ ] 合否の通知が明確か
   - [ ] 文章全体が一貫性を持っているか
